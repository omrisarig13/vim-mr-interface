*vim-mr-interface.txt*
                                                            *vim-mr-interface*

==============================================================================
CONTENTS                                           *vim-mr-interface-contents*
  1. Introduction.....................................|vim-mr-interface-intro|
  2. Configuration...................................|vim-mr-interface-config|
      1. Cache Flags............................|vim-mr-interface-cache-flags|
  3. Commands......................................|vim-mr-interface-commands|
      1. Adding Comments On Unchanged Code
.................................|vim-mr-interface-comments-on-unchanged-code|
      2. Inserting Body......................|vim-mr-interface-inserting-body|
  4. Cache............................................|vim-mr-interface-cache|

==============================================================================
INTRODUCTION                                          *vim-mr-interface-intro*

This plugin is a plugin that will let you write CRs on gitlab MRs directly
from vim.

The plugin introduces some commands that can be used to send comments directly
from your vim into an MR in gitlab, and have a cache mechanism that will save
your information and let you send lots of commands one after the other without
setting these variables over and over again.

==============================================================================
CONFIGURATION                                        *vim-mr-interface-config*

vim-mr-interface is configured using maktaba flags. It defines some flags that
can be configured using |Glaive| or any other plugin manager that uses the
maktaba setting API. It also supports entirely disabling commands from being
defined by clearing the plugin[commands] flag.

Basic example of setting a |Glaive| flag is:

  Glaive vim-mr-interface gitlab_private_token="12345678910111213141"

For full information about how to configure the flags, you can read Glaive
documentation: https://github.com/google/vim-glaive/blob/master/README.md.

                                      *vim-mr-interface:gitlab_server_address*
Save the address of the gitlab server to run the commands on.
Default: 'gitlab.com' `

                                       *vim-mr-interface:gitlab_private_token*
Save the private token to use when authenticating with gitlab. This flag
should be defined by the user with the proper gitlab authentication
information. If it will stay empty, the user will be prompt to add the private
token every time he runs any command.
Default: '' `

                                 *vim-mr-interface:automatically_insert_cache*
Save whether the plugin should use the cache value instantly, or always ask
the user to insert the needed values.
Default: v:true `

                              *vim-mr-interface:automatically_insert_defaults*
Save whether the plugin should use the default values it calculates by itself
instantly, or always ask the user to insert the needed values.

The values that the plugin can calculate by itself are:
  * merge request id - from the current branch name.
Default: v:true `

                                  *vim-mr-interface:use_cache_before_defaults*
Whenever the plugin need to get data, it has three methods to do so:
  * Get the data from the cache.
  * Get the data from default the plugins calculates.
  * Get the data directly from the user.
This flag control the order in which the plugin will try to get the data. In
case the value of this flag will be true, the plugin will start by searching
for the value in the cache, and only if it is not in the cache, it will use
the default. In case the flag will be false, the plugin will start by looking
for the value in the defaults, and only if it can't get it from there, it will
get the value from the cache.

It is recommended to start the search in the cache, because it should be
faster for some values (when the getting of the default value require
communication with gitlab for example).
Default: v:true `

                                      *vim-mr-interface:read_body_from_buffer*
Save whether the plugin should create a buffer whenever it needs to read the
body of a message from the user, or get the body in the regular method.

For more information about reading the body from a buffer, read
|vim-mr-interface-inserting-body|.
Default: v:true `

                                         *vim-mr-interface:body_buffer_height*
The height of the scratch buffer that will be created when inserting the body.

This is relevant only in case the value of
|vim-mr-interface:read_body_from_buffer|.
Default: 5 `

                                *vim-mr-interface:support_fugitive_file_names*
Whether to support fugitive file names.

When editing the code using fugitive, with the command of Gdiffsplit (and
Gsdiffsplit, Ghdiffsplit) the names of the old files are being changed. In
case this flag will be true, whenever the plugin will get the file name, it
will turn files from fugitive names into regular names, so they will be able
to be added to the gitlab as comments.
Default: v:true `

                                           *vim-mr-interface:plugin[commands]*
Configures whether plugin/commands.vim should be loaded.
Default: 1 `

==============================================================================
CACHE FLAGS                                     *vim-mr-interface-cache-flags*

The values of the cache flags can be also used when configuring the plugin.
However, you probably don't want that.

In case you do want to configure the cache values, you can call
|:MRInterfaceUpdateValueInCache| from anyplace in your vimrc.

This way, you will be able to set the values of the cache in load time of vim,
exactly as you would have done for any other configuration flags. The possible
values of the configuration flags are:
  * 'base sha'
  * 'start sha'
  * 'head sha'
  * 'project id'
  * 'merge request id'
  * 'gitlab private token'

For example:

  MRInterfaceUpdateValueInCache 'merge request id' 4

For more information about the cache mechanism, see |vim-mr-interface-cache|.

==============================================================================
COMMANDS                                           *vim-mr-interface-commands*

:MRInterfaceAddComment                                *:MRInterfaceAddComment*
  Add a comment into a gitlab MR. If run without arguments, this function
  works interactively (asks you for all the needed arguments during the
  command run and add them as you insert them). Once all the arguments are
  inserted, the comment will be added to the gitlab MR. This command will get
  the body of the comment from a new buffer (by default). To read more about
  it, read |vim-mr-interface-inserting-body|.


:MRInterfaceAddComment [body]
  Add a comment into a gitlab MR. In this form, the body of the comment will
  be according to the parameter. All the other arguments must be present in
  the cache, and they will be used from there. In case there are missing
  arguments, an error will be printed to the screen. In order to fill the
  arguments in the cache, |:MRInterfaceSetCache| can be used.


:MRInterfaceAddComment [body] [project_id] [merge_request_id]
  Add a comment to gitlab. In this form, the comment that will be added will
  have all the arguments as given from the ex-command.


:MRInterfaceAddComment [body] [private_token] [project_id] [merge_request_id]
  This is the same as the previous form except that in this form the
  [private_token] is inserted as well. When run with this form, the private
  token that will be inserted will be used, ignoring the global private token.

:MRInterfaceAddGeneralDiscussionThread
                                      *:MRInterfaceAddGeneralDiscussionThread*
  Add a general discussion thread into a gitlab MR. A general discussion
  thread is the same as comment, but it can be resolved. If run without
  arguments, this function works interactively (asks you for all the needed
  arguments during the command run and add them as you insert them). Once all
  the arguments are inserted, the new discussion thread will be added to the
  gitlab MR. This command will get the body of the comment from a new buffer
  (by default). To read more about it, read |vim-mr-interface-inserting-body|.


:MRInterfaceAddGeneralDiscussionThread [body]
  Add a general discussion thread a gitlab MR. In this form, the body of the
  general discussion thread will be according to the parameter. All the other
  arguments must be present in the cache, and they will be used from there. In
  case there are missing arguments, an error will be printed to the screen. In
  order to fill the arguments in the cache, |:MRInterfaceSetCache| can be
  used.


:MRInterfaceAddGeneralDiscussionThread [body] [project_id] [merge_request_id]
  Add a general discussion thread to gitlab. In this form, the general
  discussion thread that will be added will have all the arguments as given
  from the ex-command.


:MRInterfaceAddGeneralDiscussionThread [body] [private_token] [project_id]
  [merge_request_id]
  This is the same as the previous form except that in this form the
  [private_token] is inserted as well. When run with this form, the private
  token that will be inserted will be used, ignoring the global private token.

:MRInterfaceAddCodeDiscussionThread      *:MRInterfaceAddCodeDiscussionThread*
  Add a code discussion thread into a gitlab MR. A code discussion thread is a
  resolvable comment that is linked to specific lines in a file in the MR. If
  run without arguments, this function works interactively (asks you for all
  the needed arguments during the command run and add them as you insert
  them). Once all the arguments are inserted, the new discussion thread will
  be added to the gitlab MR. This command will get the body of the comment
  from a new buffer (by default). To read more about it, read
  |vim-mr-interface-inserting-body|.


:MRInterfaceAddCodeDiscussionThread [body] [base_sha] [start_sha] [head_sha]
  [old_path] [new_path] [old_line] [new_line] [project_id] [merge_request_id]
  Add a code discussion thread to gitlab. In this form, the discussion thread
  that will be added will have all the arguments as given from the ex-command.
  This command is filled with a lot of arguments. Almost always it will be
  easier to use the interactive form of this command. (Here mainly for
  automations if needed).


:MRInterfaceAddCodeDiscussionThread [body] [base_sha] [start_sha] [head_sha]
  [old_path] [new_path] [old_line] [new_line] [gitlab_private_token]
  [project_id] [merge_request_id]
  This is the same as the previous form except that in this form the
  [private_token] is inserted as well. When run with this form, the private
  token that will be inserted will be used, ignoring the global private token.

:MRInterfaceAddCodeDiscussionThreadOnOldCode
                                *:MRInterfaceAddCodeDiscussionThreadOnOldCode*
  Add a new code discussion thread on old code. This function will add get the
  comment from you (using temp buffer, read |vim-mr-interface-inserting-body|
  for more information), and then add a comment with this information on the
  current line of code on the file, assuming that the file is an old code (the
  comment will appear on the file before the change that was done in this
  commit). This command works for old code only. Old code can be code on file
  that was deleted during this merge request, it can be code that was changed
  on existing file during this merge request (when looking at the old file),
  and it can be on code that was deleted in an existing file during this merge
  request.


:MRInterfaceAddCodeDiscussionThreadOnOldCode [body]
  Same as the previous command, but in this form it get the body of the new
  discussion thread from the command, not interactively from the user.


:MRInterfaceAddCodeDiscussionThreadOnOldCode [body] [base_sha] [start_sha]
  [head_sha] [project_id] [merge_request_id]
  Same as the previous command, but in this form it gets all the arguments
  from the command, not interactively from the user.


:MRInterfaceAddCodeDiscussionThreadOnOldCode [body] [base_sha] [start_sha]
  [head_sha] [project_id] [merge_request_id] [gitlab_private_token]
  The same as the command above, but this form gets the private token as
  parameter as well.

:MRInterfaceAddCodeDiscussionThreadOnNewCode
                                *:MRInterfaceAddCodeDiscussionThreadOnNewCode*
  Add a new code discussion thread on new code. This function will add get the
  comment from you (using temp buffer, read |vim-mr-interface-inserting-body|
  for more information), and then add a comment with this information on the
  current line of code on the file, assuming that the file is an new code (the
  comment will appear on the file after the change that was done in this
  commit). This command works for new code only. New code can be code on file
  that was added during this merge request, it can be code that was changed on
  existing file during this merge request, and it can be on code that was
  added in an existing file during this merge request.


:MRInterfaceAddCodeDiscussionThreadOnNewCode [body]
  Same as the previous command, but in this form it get the body of the new
  discussion thread from the command, not interactively from the user.


:MRInterfaceAddCodeDiscussionThreadOnNewCode [body] [base_sha] [start_sha]
  [head_sha] [project_id] [merge_request_id]
  Same as the previous command, but in this form it gets all the arguments
  from the command, not interactively from the user.


:MRInterfaceAddCodeDiscussionThreadOnNewCode [body] [base_sha] [start_sha]
  [head_sha] [project_id] [merge_request_id] [gitlab_private_token]
  The same as the command above, but this form gets the private token as
  parameter as well.

:MRInterfaceResetCache                                *:MRInterfaceResetCache*
  Reset the cache of the plugin.

  For more information about the cache mechanism, see
  |vim-mr-interface-cache|.

:MRInterfaceSetCache                                    *:MRInterfaceSetCache*
  Set all the keys in the cache, interactively. This function will ask the
  user to insert values for all the keys of the cache. This can be used in
  order to set all the values of the cache in the start, and from there on
  just count on that they will stay the same. This function is interactive,
  and it doesn't have non-interactive option.

  For more information about the cache mechanism, see
  |vim-mr-interface-cache|.

:MRInterfaceUpdateValueInCache [key] [value]  *:MRInterfaceUpdateValueInCache*
  Add the given [value] into the cache as the value for [key]. This command
  can be used to set only a specific key in the cache (differently from the
  command of |:MRInterfaceSetCache| that updates all the values in the cache).
  The value of [key] must be a valid entry in the cache. If it won't be valid
  value from the cache, the command with fail with proper error.

  For more information about the cache mechanism, see
  |vim-mr-interface-cache|.

==============================================================================
ADDING COMMENTS ON UNCHANGED CODE
                                 *vim-mr-interface-comments-on-unchanged-code*

During some CRs, there is a need to add comments on code that was not changed
during the MR, but was affected by other changes in the code. It seems
reasonable that there would be a command that will add such comment (like the
commands of MRInterfaceAddCodeDiscussionThreadOnOldCode or
MRInterfaceAddCodeDiscussionThreadOnNewCode). However, there isn't such
command currently.

The reason that there isn't such command is that adding command on unchanged
code is hard with the current API interface of gitlab. As for now, when adding
code on unchanged lines, there are two possible scenarios:
  * Code on file that was not changed - As for now, it is impossible. Gitlab
    doesn't allow users to add comments on files that weren't changed during
    the merge request. I recommend creating a regular discussion thread for
    this.
  * Unchanged code in a file that has changes - It is possible. However, when
    sending the comment to gitlab, the parameters should include both the line
    number in the old code, and the line number in the new code. As for now,
    it is impossible to do with the plugin in its own command, because the
    plugin can't know what is the line number of the code in the other
    revision (the line number can be different in case code was added or
    deleted before the current line). Such comments can be added by running
    the regular command (MRInterfaceAddGeneralDiscussionThread and writing
    manually the line numbers for the new discussion thread). It might be
    possible to support such comments in the future, when this plugin will
    support fugitive integration.

==============================================================================
INSERTING BODY                               *vim-mr-interface-inserting-body*

By default, whenever running a command that needs to get the body of any
command sent to gitlab, the body of the command will be inserted from a
temporary buffer.

This is done because a lot of the time, the body of the command will be long,
and might consist of several different sentences. Because the input consists
of several sentences, it can't be inserted using the |input()| method (which
get the input from the menu at the bottom of vim) because this command can not
get more than one line. Moreover, whenever typing a lot of information, it is
a lot easier to write it with full vim compatibility than to insert it as text
in the command window.

When the command will run in vim, a new unnamed buffer will be open at the top
of the current tab. You should write the body of the comment into this buffer.
When the buffer will be closed, the body will be taken from it (it does not
matter if the buffer will be saved or not). After the buffer will be closed,
it will be completely wiped out of vim's memory (to not clutter the memory
with a lot of unused buffers).

After running a command, but before filling the information inside the buffer,
you can do whatever you want with vim (it is completely okay to move around,
change windows, tabs, open or close any other files, copy information to and
from this buffer...). However, it will be impossible to run any other command
from this plugin until this buffer will be closed and the current command will
be completed. In case you want to cancel the current command, you can leave
the buffer empty, it will cancel the function.

In case you don't want this functionality, and want to insert the body as all
the other variables (using the |input()| method), you can change the value of
|vim-mr-interface:read_body_from_buffer|.

==============================================================================
CACHE                                                 *vim-mr-interface-cache*


Whenever working on a gitlab MR, a lot of the parameters for many functions
will stay the same for a sequence of commands.

For example, whenever working on a single MR, all these arguments will stay
the same across all the calls:
  * The id of the merge request
  * The id of the project
  * The sha of the base commit in the MR
  * The sha of the head commit in the MR
  * The sha of the start commit in the MR

Because all these arguments will stay the same, this plugin creates a cache
mechanism that will save these arguments and set them for you.

Whenever you will run one of the interactive commands for the first time, it
will prompt you to insert all the arguments that it needs. This should be the
only time that you inserts the constant arguments for this vim session. From
now on, every command that will run will use the arguments that you have
inserted originally. This will include only the arguments that should stay the
same for the merge request, letting you change the variable that changes
between different comments on the code.

By default, you won't be bothered again with these arguments, however, it is
configurable and can be changed. To see how it can be changed, see
|vim-mr-interface:automatically_insert_cache|. If this flag will be false, the
values from the cache won't be set automatically, but they will be the default
values for their parameters, letting you not insert them (by setting empty
value, or a value of `null`).

In case you had made a mistake, or want to update a single argument in the
cache, you can use the command of |:MRInterfaceUpdateValueInCache|.

In case you want to reset the cache completely, use |:MRInterfaceResetCache|.

And, in case you don't want to set the cache with a command, but just set all
its values upfront, you can use the command of |:MRInterfaceSetCache|

The whole cache is per vim session. It means that once you have exited your
vim session, the cache will be deleted, and there wouldn't be any way to
retrieve it.


Why use cache and not global variables?

All the arguments that are part of the cache are arguments that will be the
same across some sequental calls to the various plugin's functions, but won't
be the same across different vim sessions. For example, the MR number will
stay the same as long as you work on the same gitlab MR, but once you have
finished with it, you wouldn't use the same number again. Moreover, in case
you work on more than one gitlab project at a time, you will need to have
different values for the project's id during this time. From this reason, it
is wrong to set these variables as globals (they change too often and can't be
the same across all the vim's instances). The solution of cache will work best
to help complete you and set the values for you, without continuing to use the
old values when they no longer makes sense.

In case you don't want to use the values as cache, you can just use them as
regular global values by setting them explicitly in your vimrc according to
the instructions from here: |vim-mr-interface-cache-flags|


vim:tw=78:ts=8:ft=help:norl:
